name: ghcr
on:
  workflow_dispatch:
    inputs:
      OPENLANE_TAG:
        description: 'OpenLANE Tag ?'
        type: string
        default: tags/2024.04.02
        required: true

      BUILD_BUILD_BASE:
        description: 'Build build-base ?'
        type: boolean
        default: false
        required: true

      BUILD_RUN_BASE:
        description: 'Build run-base ?'
        type: boolean
        default: false
        required: true

jobs:
  build:
    name: Build GHCR OpenLane Image
    runs-on: ubuntu-latest
    permissions:
      packages: write
    env:
      MAKE: make
      PYTHON_BIN: python3
      IMAGE_ARCH: amd64
      IMAGE_DIST: centos-7
      #DOCKER_OPTS: '--insecure-registry docker.io'
      # TEST OR BUILD
      BUILD_BUILD_BASE: ${{ inputs.BUILD_BUILD_BASE }}
      BUILD_RUN_BASE: ${{ inputs.BUILD_RUN_BASE }}
      GHCR_NAMESPACE: ${{ github.actor }}
      # Do you wish to push any intermediate images built to GHCR
      GHCR_PUSH_INTERMEDIATES: false
      GHCR_PUSH_FINAL: true
      GHCR_TAG: latest
      OPENLANE_TAG: ${{ inputs.OPENLANE_TAG }}
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        #with:
        #  repository: ${{ github.repository }}
        #  fetch-tags: true
        #  ref: ${{ inputs.OPENLANE_TAG }}

      - name: docker
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker version
          docker info
          docker images

          # FIXME
          docker pull docker.io/efabless/openlane-tools:build-base-b4cf9f47b07511bd9f8076c44802223d7a52e900ea5c6cf9acf14fd2abb78b83-centos-7-amd64
          docker pull docker.io/efabless/openlane-tools:run-base-b4cf9f47b07511bd9f8076c44802223d7a52e900ea5c6cf9acf14fd2abb78b83-centos-7-amd64
          export BUILD_BASE_TAG="build-base-b4cf9f47b07511bd9f8076c44802223d7a52e900ea5c6cf9acf14fd2abb78b83-centos-7-amd64"
          echo "BUILD_BASE_TAG=$BUILD_BASE_TAG" >> $GITHUB_ENV
          export RUN_BASE_TAG="run-base-b4cf9f47b07511bd9f8076c44802223d7a52e900ea5c6cf9acf14fd2abb78b83-centos-7-amd64"
          echo "RUN_BASE_TAG=$RUN_BASE_TAG" >> $GITHUB_ENV

          #docker pull efabless/openlane-tools:build-base-dfc8ee9717261f682460feb13f444f131139bd7c257ba3463d72bca3de7f46c5-centos-7-amd64
          #docker pull efabless/openlane-tools:run-base-dfc8ee9717261f682460feb13f444f131139bd7c257ba3463d72bca3de7f46c5-centos-7-amd64

          echo -n "$GITHUB_TOKEN" | docker login ghcr.io -u "$GHCR_NAMESPACE" --password-stdin

          # docker build \
          # --label "org.opencontainers.image.source=https://github.com/octocat/my-repo" \
          # --label "org.opencontainers.image.description=My container image" \
          # --label "org.opencontainers.image.licenses=MIT"

          # GHA template avoidance
          docker_format="{ .ID }\t{ .Repository }\t{ .Tag }\t{ .CreatedAt }\t{ .Size }" # GHA escape avoidance
          docker_format=$(echo -n "$docker_format" | sed -e "s#{#{{#g" -e "s#}#}}#g")
          echo "docker_format=$docker_format"
          # go templates and GHA templates seem the same
          echo "DOCKER_FORMAT=$docker_format" >> $GITHUB_ENV
          
      - name: make venv
        run: |
          make venv

      - name: make build-build-base
        if: ${{ env.BUILD_BUILD_BASE != 'false' }}
        run: |
          PYTHON_BIN=$(pwd)/venv/bin/${PYTHON_BIN} ${MAKE} -C docker build-build-base

          readarray IID <<< $(docker images --filter "reference=efabless/openlane-tools" --format "$DOCKER_FORMAT" | egrep "build-base-" | head -n 1 | tr '\t' '\n')
          BUILD_BASE_IMAGE_NAME=${IID[0]}
          test -n "$BUILD_BASE_IMAGE_NAME"
          echo "BUILD_BASE_IMAGE_NAME=$BUILD_BASE_IMAGE_NAME" >> $GITHUB_ENV

      - name: docker push build-base GHCR
        if: ${{ env.GHCR_PUSH_INTERMEDIATES != 'false' && env.BUILD_BASE_IMAGE_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker images --format "$DOCKER_FORMAT" | egrep "(efabless/openlane|efabless/openlane-tools)" | sed -e "s#\t# | #g" -e 's#.*#|\0|#'
          docker tag "$BUILD_BASE_IMAGE_NAME" "ghcr.io/$GHCR_NAMESPACE/build-base-${BUILD_BASE_IMAGE_NAME}:${GHCR_TAG}"
          echo "###"
          docker images

          if [ "$GHCR_PUSH_INTERMEDIATES" != "false" ]
          then
            # push OL image to GHCR
            docker push "ghcr.io/$GHCR_NAMESPACE/build-base-${BUILD_BASE_IMAGE_NAME}:${GHCR_TAG}"
          else
            echo "GHCR_PUSH_INTERMEDIATES=$GHCR_PUSH_INTERMEDIATES"
          fi

      - name: make build-run-base
        if: ${{ env.BUILD_RUN_BASE != 'false' }}
        run: |
          PYTHON_BIN=$(pwd)/venv/bin/${PYTHON_BIN} ${MAKE} -C docker build-run-base

          readarray IID <<< $(docker images --filter "reference=efabless/openlane-tools" --format "$DOCKER_FORMAT" | egrep "run-base-" | head -n 1 | tr '\t' '\n')
          RUN_BASE_IMAGE_NAME=${IID[0]}
          test -n "$RUN_BASE_IMAGE_NAME"
          echo "RUN_BASE_IMAGE_NAME=$RUN_BASE_IMAGE_NAME" >> $GITHUB_ENV

      - name: docker push run-base GHCR
        if: ${{ env.GHCR_PUSH_INTERMEDIATES != 'false' && env.RUN_BASE_IMAGE_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker images --format "$DOCKER_FORMAT" | egrep "(efabless/openlane|efabless/openlane-tools)" | sed -e "s#\t# | #g" -e 's#.*#|\0|#'
          docker tag "$RUN_BASE_IMAGE_NAME" "ghcr.io/$GHCR_NAMESPACE/run-base-${RUN_BASE_IMAGE_NAME}:${GHCR_TAG}"
          echo "###"
          docker images

          if [ "$GHCR_PUSH_INTERMEDIATES" != "false" ]
          then
            # push OL image to GHCR
            docker push "ghcr.io/$GHCR_NAMESPACE/run-base-${RUN_BASE_IMAGE_NAME}:${GHCR_TAG}"
          else
            echo "GHCR_PUSH_INTERMEDIATES=$GHCR_PUSH_INTERMEDIATES"
          fi

      - name: make build-openroad_app
        run: |
          # https://github.com/obriensp/OpenROAD/tree/spo/ol2-antenna-repair-patch
          curl -s -o openlane_spo_d1f0b60d7b31393ec0afb8f96e1ca02bb465b3fc.patch "https://github.com/The-OpenROAD-Project/OpenROAD/commit/d1f0b60d7b31393ec0afb8f96e1ca02bb465b3fc.patch"
          # checkout OpenROAD
          #git -c protocol.version=2 clone --no-tags --no-recurse-submodules --depth=1 -b 0889970d1790a2617e69f253221b8bd7626e51dc https://github.com/The-OpenROAD-Project/OpenROAD OpenROAD
          git -c protocol.version=2 clone --no-recurse-submodules https://github.com/The-OpenROAD-Project/OpenROAD OpenROAD
          pwd
          ls -la
          cd OpenROAD
          #git checkout -b master origin/master
          git checkout -b 0889970d17 0889970d1790a2617e69f253221b8bd7626e51dc
          # patch OpenROAD
          #git am ../openlane_spo_d1f0b60d7b31393ec0afb8f96e1ca02bb465b3fc.patch
          if patch -p1 < ../.github/workflows/openlane_spo_ol1.patch
          then
            echo "Patch001 Successful"
          elif patch -p1 < ../openlane_spo_d1f0b60d7b31393ec0afb8f96e1ca02bb465b3fc.patch
          then
            echo "Patch002 Successful, ignore error above."
          else
            echo "$0: Unable to patch" 1>&2
            exit 1
          fi
          git config --global user.email "darryl.miles.darrylmiles.org"
          git config --global user.name "Darryl L. Miles GHA"
          git commit -m "SPO antenna repair fix d1f0b60d7b31393ec0afb8f96e1ca02bb465b3fc" -a
          git log -n3
          echo "git archive ..."
          git archive -o ../docker/openroad_app/OpenROAD.tar.gz HEAD
          ls -lad --full-time ../docker/openroad_app/OpenROAD.tar.gz
          # Now this does not work at this time, it expects to get with curl
          #
          OPENROAD_APP_REPO=$(pwd)
          echo "OPENROAD_APP_REPO=$OPENROAD_APP_REPO"
          OPENROAD_APP_COMMIT=$(git rev-parse HEAD)
          echo "OPENROAD_APP_COMMIT=$OPENROAD_APP_COMMIT"
          #
          cd ..

          ## So we patch the Dockerfile to change where the OpenROAD source comes from
          cp -v docker/openroad_app/Dockerfile docker/openroad_app/Dockerfile.bak
          sed -e '/^RUN curl -L \${OPENROAD_APP_REPO.*/cCOPY ./OpenROAD.tar.gz .\nRUN tar -xzC . -f ./OpenROAD.tar.gz --strip-components=1' -i docker/openroad_app/Dockerfile
          diff -u docker/openroad_app/Dockerfile.bak docker/openroad_app/Dockerfile || true
          
          # build OpenROAD
          PYTHON_BIN=$(pwd)/venv/bin/${PYTHON_BIN} ${MAKE} -C docker build-openroad_app

          readarray IID <<< $(docker images --filter "reference=efabless/openlane-tools" --format "$DOCKER_FORMAT" | egrep "openroad_app-" | head -n 1 | tr '\t' '\n')
          OPENROAD_APP_IMAGE_NAME=${IID[0]}
          test -n "$OPENROAD_APP_IMAGE_NAME"
          echo "OPENROAD_APP_IMAGE_NAME=$OPENROAD_APP_IMAGE_NAME" >> $GITHUB_ENV


      - name: tool_metadata.yml
        run: |          
          if [ ! -f dependencies/tool_metadata.yml.bak ]
          then
            cp -v dependencies/tool_metadata.yml dependencies/tool_metadata.yml.bak
          fi

          # using the environment variables
          # patch dependencies/tool_metadata.yml with local image references
          if [ -n "$OPENROAD_APP_IMAGE_NAME" ]
          then
            OPENROAD_APP_IMAGE_NAME_FULL=$(docker images --filter "id=$OPENROAD_APP_IMAGE_NAME" --no-trunc -q)
            sed -e "/^- name: openroad_app/{n;n;s/^  commit: .*/  commit: ${OPENROAD_APP_IMAGE_NAME_FULL}/}" -i dependencies/tool_metadata.yml
          fi

          diff -u dependencies/tool_metadata.yml.bak dependencies/tool_metadata.yml

          # patch docker/openlane/Dockerfile
          # Hmm this is just a *.tpl now

          # TODO
          # mark the image somewhere as unofficial build (so this is clearly in logs and data)

      - name: make openlane
        run: |
          export RUN_BASE_IMAGE=$RUN_BASE_IMAGE_NAME
          export BUILD_BASE_IMAGE=$BUILD_BASE_IMAGE_NAME
          PYTHON_BIN=$(pwd)/venv/bin/${PYTHON_BIN} ${MAKE} -C docker build-openlane
          # make openlane
          #make openlane 2>&1 | tee MAKE_OPENLANE.LOG
          
          # REPOSITORY                TAG                                                                                          IMAGE ID       CREATED              SIZE
          # efabless/openlane         861d98e2ee37ffb009361d872d2dd1b60071b1c2-amd64                                               d7753fb0bc2f   8 seconds ago        1.52GB
          # efabless/openlane-tools   openroad_app-0889970d1790a2617e69f253221b8bd7626e51dc-centos-7-amd64                         084651ae695a   About a minute ago   1.19GB
          # efabless/openlane-tools   run-base-48064de8a7ca444cef6b9b7dbb520e370edd0b620b825282931a6373b7948e5a-centos-7-amd64     6fd58af52079   45 minutes ago       1.02GB
          # efabless/openlane-tools   build-base-48064de8a7ca444cef6b9b7dbb520e370edd0b620b825282931a6373b7948e5a-centos-7-amd64   99f9cfdd99b1   48 minutes ago       2.02GB
          # efabless/openlane-tools   verilator-67dfa37c560385827218350ea936eb1baf604240-centos-7-amd64                            73e532bab9a0   4 months ago         1.16GB
          # efabless/openlane-tools   yosys-4a1b5599258881f579a2d95274754bcd8fc171bd-centos-7-amd64                                23590823c635   5 months ago         1.04GB
          # efabless/openlane-tools   magic-0afe4d87d4aacfbbb2659129a1858a22d216a920-centos-7-amd64                                fe8bfaa30f8b   8 months ago         614MB
          # efabless/openlane-tools   netgen-87d8759a6980d297edcb9be6f8661867e4726f9a-centos-7-amd64                               da7d1f9ac566   9 months ago         596MB
          # efabless/openlane-tools   klayout-44a2aa9ca17c2b1c154f9c410ded063de9ed3e12-centos-7-amd64                              e990dd840e43   15 months ago        706MB
          # efabless/openlane-tools   git-e9d7761bb94f20acc98824275e317fa82436c25d-centos-7-amd64                                  d1e132b58bea   23 months ago        771MB
          # efabless/openlane-tools   vlogtoverilog-a550469b63e910ede6e3022e2886bca96462c540-centos-7-amd64                        4b7578583789   23 months ago        594MB
          # efabless/openlane-tools   padring-b2a64abcc8561d758c0bcb3945117dcb13bd9dca-centos-7-amd64                              4eb4f439b302   23 months ago        599MB

          # fish out containerID iid, its the only image in efabless/openlane
          readarray IID <<< $(docker images --filter "reference=efabless/openlane" --format "$DOCKER_FORMAT" | egrep "[0-9a-fA-F]{40}-${IMAGE_ARCH}" | head -n 1 | tr '\t' '\n')
          OPENLANE_IMAGE_NAME=${IID[0]}
          test -n "$OPENLANE_IMAGE_NAME"
          echo "OPENLANE_IMAGE_NAME=$OPENLANE_IMAGE_NAME" >> $GITHUB_ENV

      - name: docker push GHCR
        if: ${{ env.GHCR_PUSH_FINAL != 'false' && env.OPENLANE_IMAGE_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker images

          (
          echo "| ID | Repository | Tag | Created | Size |"
          echo "| - | - | - | - | - |"
          docker images --format "$DOCKER_FORMAT" | egrep "(efabless/openlane\\W)" | sed -e 's#\t# | #g' -e 's#.*#|\0|#'
          echo "|  |  |  |  |  |"
          docker images --format "$DOCKER_FORMAT" | egrep "(efabless/openlane-tools\\W)" | sed -e 's#\t# | #g' -e 's#.*#|\0|#'
          ) >> $GITHUB_STEP_SUMMARY

          docker tag "$OPENLANE_IMAGE_NAME" "ghcr.io/$GHCR_NAMESPACE/openlane-${OPENLANE_IMAGE_NAME}:${GHCR_TAG}"

          if [ "$GHCR_PUSH_FINAL" != "false" ]
          then
            # push OL image to GHCR
            docker push "ghcr.io/$GHCR_NAMESPACE/openlane-${OPENLANE_IMAGE_NAME}:${GHCR_TAG}"
          fi

      - name: cleanup
        if: always()
        run: |
          dd if=/dev/zero bs=4k count=1 status=none of=$HOME/.docker/config.json # chattr +s config.json
          rm -fv $HOME/.docker/config.json # paranoid cleanup

